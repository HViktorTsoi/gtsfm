[{"C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\index.js":"1","C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\App.js":"2","C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\reportWebVitals.js":"3","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\index.js":"4","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\reportWebVitals.js":"5","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\App.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":3104,"mtime":1610902653536,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":5455,"mtime":1612841872461,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1wmx23r",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"lfpqkh",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\index.js",[],["32","33"],"C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\App.js",["34","35","36"],"import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport {Canvas} from \"react-three-fiber\";\nimport {OrbitControls, Line, Html} from \"drei\";\n\nconst App = (props) => {\n  const [pointCloud, setPointCloud] = useState([]);\n\n  //Function\n  const getGridLines = () => {\n    var coordPairSet = []\n    //add x grid lines\n    for (var z = -50; z <= 50; z++) {\n      coordPairSet.push([[-50, 0, z], [50, 0, z]]);\n    }\n    //add z grid lines\n    for (var x = -50; x <= 50; x++) {\n      coordPairSet.push([[x, 0, -50], [x, 0, 50]]);\n    }\n\n    var finalLineGridSet = []\n    coordPairSet.map(coordPair => {\n      finalLineGridSet.push(<Line points={coordPair} color=\"black\" position={[0,0,0]} lineWidth={0.1}/>);\n    });\n    return finalLineGridSet;\n  }\n\n  //Component\n  const PointMesh = ({position, size, color, label}) => {\n    return (\n      <mesh position={position}>\n        <sphereBufferGeometry attach='geometry' args={size} />\n        <meshStandardMaterial attach='material' color={color}/>\n\n        <Html scaleFactor={50} position={[1,0.5,0]}>\n          <div class=\"content\">\n            {label}\n          </div>\n        </Html>\n\n      </mesh>\n    )\n  }\n\n  //Component\n  const CoordinateGrid = () => { \n    return (\n      <mesh>\n          <Line \n            points={[[-50,0,0], [50,0,0]]} \n            color=\"red\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n          <Line \n            points={[[0,-50,0], [0,50,0]]} \n            color=\"green\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n          <Line \n            points={[[0,0,-50], [0,0,50]]} \n            color=\"blue\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n\n          {getGridLines()}\n      </mesh>\n    )\n  }\n\n  //Function\n  const readFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0])\n    reader.onload = (e) => {\n      const pointString = e.target.result;\n      const arrStringPoints = pointString.split('\\n');\n      var pointArr = [];\n      for (var i = 0; i < arrStringPoints.length; i++) {\n        pointArr.push(JSON.parse(arrStringPoints[i]));\n      }\n\n      var finalPointsJSX = [];\n      pointArr.map(point => {\n        finalPointsJSX.push(<PointMesh  position={point} size={[0.3,16,16]} color='rgb(255, 0, 0)'/>);\n      })\n      setPointCloud(finalPointsJSX);\n    }\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"upload-container\">\n        <input type=\"file\" name=\"Input Points\" onChange={(e) => readFile(e)}/>\n      </div>\n\n      <Canvas colorManagement camera={{position: [30,30,30], fov: 100}}>\n        <ambientLight intensity={0.5}/>\n        <pointLight position={[0, 0, 20]} intensity={0.5}/> \n        <directionalLight \n          position={[0,10,0]} \n          intensity={1.5} \n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n        />\n\n        {pointCloud}\n\n        <CoordinateGrid />\n\n        <OrbitControls/>\n      </Canvas>\n    </div>\n  )\n}\n\nexport default App;\n","C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\reportWebVitals.js",[],["37","38"],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\index.js",[],["39","40"],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\reportWebVitals.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\App.js",["41","42","43","44","45","46","47","48","49","50"],"import React, {useEffect, useState, useRef} from \"react\";\nimport {Canvas, extend, useThree, useFrame, Renderer} from \"react-three-fiber\";\nimport {Line, Html} from \"drei\";\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\nimport './App.css';\nimport {DoubleSide, Scene} from 'three';\nimport {PointCloudOctree, Potree} from '@pnext/three-loader';\n\nextend({OrbitControls})\n\nconst App = (props) => {\n  const [rawFileString, setRawFileString] = useState(\"\");\n  const [pointCloud, setPointCloud] = useState([]);\n  const canvasRef = useRef();\n  const cameraRef = useRef();\n  \n  //Function\n  const getGridLines = () => {\n    var coordPairSet = []\n    //add x grid lines\n    for (var z = -10; z <= 10; z++) {\n      coordPairSet.push([[-10, 0, z], [10, 0, z]]);\n    }\n    //add z grid lines\n    for (var x = -10; x <= 10; x++) {\n      coordPairSet.push([[x, 0, -10], [x, 0, 10]]);\n    }\n\n    var finalLineGridSet = []\n    coordPairSet.map(coordPair => {\n      finalLineGridSet.push(<Line points={coordPair} color=\"black\" position={[0,0,0]} lineWidth={0.1}/>);\n    });\n    return finalLineGridSet;\n  }\n\n  //Component\n  const PointMesh = ({position, size, color, label}) => {\n    return (\n      <mesh position={position}>\n        <sphereBufferGeometry attach='geometry' args={size} />\n        <meshStandardMaterial attach='material' color={color}/>\n\n        <Html scaleFactor={30} position={[1,0.5,0]}>\n          <div class=\"content\">\n            {label}\n          </div>\n        </Html>\n\n      </mesh>\n    )\n  }\n\n  //Component\n  const SquareMesh = ({position, widthArgs, color}) => {\n    return (\n      <mesh position={position}>\n        <planeBufferGeometry attach='geometry' args={widthArgs}/> \n        <meshBasicMaterial attach='material' color={color} side={DoubleSide}/>\n      </mesh>\n    )\n  }\n\n  //Component\n  const CoordinateGrid = () => { \n    return (\n      <mesh>\n          <Line \n            points={[[-10,0,0], [10,0,0]]} \n            color=\"red\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n          <Html scaleFactor={50} position={[10,0,0]}>\n            <div class=\"content\">\n              x\n            </div>\n          </Html>\n\n          <Line \n            points={[[0,-10,0], [0,10,0]]} \n            color=\"blue\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n          <Html scaleFactor={50} position={[0,10,0]}>\n            <div class=\"content\">\n              z\n            </div>\n          </Html>\n\n          <Line \n            points={[[0,0,-10], [0,0,10]]} \n            color=\"green\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n          <Html scaleFactor={50} position={[0,0,10]}>\n            <div class=\"content\">\n              y\n            </div>\n          </Html>\n\n          {getGridLines()}\n      </mesh>\n    )\n  }\n\n  //Function\n  const swapYZ = (coords) => {\n    const tempY = coords[1]\n    coords[1] = coords[2]\n    coords[2] = tempY\n    return coords\n  }\n\n  //Function\n  const readPLYFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0])\n    reader.onload = (e) => {\n      const fileString = e.target.result;\n      setRawFileString(fileString);\n    }\n  }\n\n  //Function\n  const visualizeFile = () => {\n      const startPointsIndex = rawFileString.indexOf(\"end_header\")\n      const condensedString = rawFileString.substring(startPointsIndex)\n      var arrStringPoints = condensedString.split('\\n')\n      arrStringPoints.shift()\n      console.log(`Length: ${arrStringPoints.length}`);\n\n      var finalPointsJSX = [];  \n      const scale = 1;   \n      for (var i = 0; i < arrStringPoints.length; i += 500) {\n        var pointArr = arrStringPoints[i].split(\" \").map(Number);   \n        finalPointsJSX.push(<SquareMesh  position={[scale*pointArr[0], scale*pointArr[1], scale*pointArr[2]]} \n          widthArgs={[0.05,0.05]} \n          color={`rgb(${pointArr[3]}, ${pointArr[4]}, ${pointArr[5]})`}/>);\n      }\n      setPointCloud(finalPointsJSX);\n  }\n\n  //Component\n  const OrbitControlsComponent = () => {\n    const {\n      camera,\n      gl: {domElement}\n    } = useThree();\n\n    const controls = useRef();\n      //Runs Every Frame\n      // useFrame(({camera}) => {\n      //   console.log([camera.position.x, camera.position.y, camera.position.z])\n      //   camera.position.y += Math.random();\n      // });\n\n    return (\n      <>\n        <orbitControls \n            args={[camera, domElement]} \n            ref={controls} \n            />\n      </>\n    )\n  }\n\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"upload-container\">\n        <p className=\"ply-instructions\">Please Upload a PLY File</p>\n\n        <input type=\"file\" name=\"ply-file-reader\" onChange={(e) => readPLYFile(e)} accept=\".ply\"/>\n\n        <button className=\"file-submit-btn\" onClick={visualizeFile}>Visualize Point Cloud</button>\n      </div>\n\n      <Canvas colorManagement camera={{ fov: 30, position: [50, 50, 50]}} ref={canvasRef}>\n        <ambientLight intensity={0.5}/>\n        <pointLight position={[0, 0, 20]} intensity={0.5}/> \n        <directionalLight \n          position={[0,10,0]} \n          intensity={1.5} \n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n        />\n\n        {pointCloud}\n\n        <CoordinateGrid />\n\n        <OrbitControlsComponent />\n      </Canvas>\n    </div>\n  )\n}\n\nexport default App;",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":16,"nodeType":"57","messageId":"58","endLine":2,"endColumn":25},{"ruleId":"59","severity":1,"message":"60","line":22,"column":32,"nodeType":"61","messageId":"62","endLine":22,"endColumn":34},{"ruleId":"59","severity":1,"message":"60","line":87,"column":26,"nodeType":"61","messageId":"62","endLine":87,"endColumn":28},{"ruleId":"51","replacedBy":"63"},{"ruleId":"53","replacedBy":"64"},{"ruleId":"51","replacedBy":"65"},{"ruleId":"53","replacedBy":"66"},{"ruleId":"55","severity":1,"message":"56","line":1,"column":16,"nodeType":"57","messageId":"58","endLine":1,"endColumn":25},{"ruleId":"55","severity":1,"message":"67","line":2,"column":35,"nodeType":"57","messageId":"58","endLine":2,"endColumn":43},{"ruleId":"55","severity":1,"message":"68","line":2,"column":45,"nodeType":"57","messageId":"58","endLine":2,"endColumn":53},{"ruleId":"55","severity":1,"message":"69","line":6,"column":21,"nodeType":"57","messageId":"58","endLine":6,"endColumn":26},{"ruleId":"55","severity":1,"message":"70","line":7,"column":9,"nodeType":"57","messageId":"58","endLine":7,"endColumn":25},{"ruleId":"55","severity":1,"message":"71","line":7,"column":27,"nodeType":"57","messageId":"58","endLine":7,"endColumn":33},{"ruleId":"55","severity":1,"message":"72","line":15,"column":9,"nodeType":"57","messageId":"58","endLine":15,"endColumn":18},{"ruleId":"59","severity":1,"message":"60","line":30,"column":32,"nodeType":"61","messageId":"62","endLine":30,"endColumn":34},{"ruleId":"55","severity":1,"message":"73","line":37,"column":9,"nodeType":"57","messageId":"58","endLine":37,"endColumn":18},{"ruleId":"55","severity":1,"message":"74","line":109,"column":9,"nodeType":"57","messageId":"58","endLine":109,"endColumn":15},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["75"],["76"],["75"],["76"],"'useFrame' is defined but never used.","'Renderer' is defined but never used.","'Scene' is defined but never used.","'PointCloudOctree' is defined but never used.","'Potree' is defined but never used.","'cameraRef' is assigned a value but never used.","'PointMesh' is assigned a value but never used.","'swapYZ' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]