[{"C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\index.js":"1","C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\App.js":"2","C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\reportWebVitals.js":"3","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\index.js":"4","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\reportWebVitals.js":"5","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\App.js":"6","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\PointMesh.js":"7","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\SquareMesh.js":"8","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\SpriteMesh.js":"9","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\LineMesh.js":"10","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\CoordinateGrid.js":"11","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\RenderFrustum.js":"12","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\OrbitControlsComponent.js":"13","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\ViewFrustum_Ported\\view_frustum.js":"14","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\ViewFrustum_Ported\\se3.js":"15","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\NetworkGraph.js":"16","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\gtsfm_node_list.js":"17","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\gtsfm_edge_list.js":"18","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\DivGraph.js":"19","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\DivNode.js":"20","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\FrontendSummary.js":"21","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\PPDivNode.js":"22","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\OptDivNode.js":"23","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\MVOSummary.js":"24"},{"size":500,"mtime":499162500000,"results":"25","hashOfConfig":"26"},{"size":3104,"mtime":1610902653536,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":500,"mtime":499162500000,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":8384,"mtime":1614617074245,"results":"32","hashOfConfig":"30"},{"size":336,"mtime":1613329153228,"results":"33","hashOfConfig":"30"},{"size":397,"mtime":1613329960043,"results":"34","hashOfConfig":"30"},{"size":410,"mtime":1613329696194,"results":"35","hashOfConfig":"30"},{"size":317,"mtime":1613330097088,"results":"36","hashOfConfig":"30"},{"size":1698,"mtime":1614280984891,"results":"37","hashOfConfig":"30"},{"size":1125,"mtime":1613416092833,"results":"38","hashOfConfig":"30"},{"size":650,"mtime":1613330781046,"results":"39","hashOfConfig":"30"},{"size":8883,"mtime":1613415801929,"results":"40","hashOfConfig":"30"},{"size":2245,"mtime":1614281009934,"results":"41","hashOfConfig":"30"},{"size":1274,"mtime":1614446276099,"results":"42","hashOfConfig":"30"},{"size":2586,"mtime":1614444482758,"results":"43","hashOfConfig":"30"},{"size":4078,"mtime":1614485151995,"results":"44","hashOfConfig":"30"},{"size":12672,"mtime":1615221100165,"results":"45","hashOfConfig":"30"},{"size":840,"mtime":1614618137103,"results":"46","hashOfConfig":"30"},{"size":1217,"mtime":1615253792151,"results":"47","hashOfConfig":"30"},{"size":856,"mtime":1615218793386,"results":"48","hashOfConfig":"30"},{"size":859,"mtime":1615219180956,"results":"49","hashOfConfig":"30"},{"size":2162,"mtime":1615220693109,"results":"50","hashOfConfig":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1wmx23r",{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"lfpqkh",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\index.js",[],["109","110"],"C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\App.js",["111","112","113"],"import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport {Canvas} from \"react-three-fiber\";\nimport {OrbitControls, Line, Html} from \"drei\";\n\nconst App = (props) => {\n  const [pointCloud, setPointCloud] = useState([]);\n\n  //Function\n  const getGridLines = () => {\n    var coordPairSet = []\n    //add x grid lines\n    for (var z = -50; z <= 50; z++) {\n      coordPairSet.push([[-50, 0, z], [50, 0, z]]);\n    }\n    //add z grid lines\n    for (var x = -50; x <= 50; x++) {\n      coordPairSet.push([[x, 0, -50], [x, 0, 50]]);\n    }\n\n    var finalLineGridSet = []\n    coordPairSet.map(coordPair => {\n      finalLineGridSet.push(<Line points={coordPair} color=\"black\" position={[0,0,0]} lineWidth={0.1}/>);\n    });\n    return finalLineGridSet;\n  }\n\n  //Component\n  const PointMesh = ({position, size, color, label}) => {\n    return (\n      <mesh position={position}>\n        <sphereBufferGeometry attach='geometry' args={size} />\n        <meshStandardMaterial attach='material' color={color}/>\n\n        <Html scaleFactor={50} position={[1,0.5,0]}>\n          <div class=\"content\">\n            {label}\n          </div>\n        </Html>\n\n      </mesh>\n    )\n  }\n\n  //Component\n  const CoordinateGrid = () => { \n    return (\n      <mesh>\n          <Line \n            points={[[-50,0,0], [50,0,0]]} \n            color=\"red\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n          <Line \n            points={[[0,-50,0], [0,50,0]]} \n            color=\"green\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n          <Line \n            points={[[0,0,-50], [0,0,50]]} \n            color=\"blue\" \n            position={[0,0,0]}\n            lineWidth={0.3}\n          />\n\n          {getGridLines()}\n      </mesh>\n    )\n  }\n\n  //Function\n  const readFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0])\n    reader.onload = (e) => {\n      const pointString = e.target.result;\n      const arrStringPoints = pointString.split('\\n');\n      var pointArr = [];\n      for (var i = 0; i < arrStringPoints.length; i++) {\n        pointArr.push(JSON.parse(arrStringPoints[i]));\n      }\n\n      var finalPointsJSX = [];\n      pointArr.map(point => {\n        finalPointsJSX.push(<PointMesh  position={point} size={[0.3,16,16]} color='rgb(255, 0, 0)'/>);\n      })\n      setPointCloud(finalPointsJSX);\n    }\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"upload-container\">\n        <input type=\"file\" name=\"Input Points\" onChange={(e) => readFile(e)}/>\n      </div>\n\n      <Canvas colorManagement camera={{position: [30,30,30], fov: 100}}>\n        <ambientLight intensity={0.5}/>\n        <pointLight position={[0, 0, 20]} intensity={0.5}/> \n        <directionalLight \n          position={[0,10,0]} \n          intensity={1.5} \n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n        />\n\n        {pointCloud}\n\n        <CoordinateGrid />\n\n        <OrbitControls/>\n      </Canvas>\n    </div>\n  )\n}\n\nexport default App;\n","C:\\Users\\adisi\\Desktop\\React-Three-Fiber\\rtf-intro\\src\\reportWebVitals.js",[],["114","115"],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\index.js",[],["116","117"],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\reportWebVitals.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\App.js",["118","119","120","121","122"],"import React, {useEffect, useState, useRef} from \"react\";\nimport {Canvas, extend} from \"react-three-fiber\";\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\nimport './App.css';\n\nimport SpriteMesh from './Components/SpriteMesh';\nimport CoordinateGrid from './Components/CoordinateGrid';\nimport RenderFrustum from './Components/RenderFrustum';\nimport OrbitControlsComponent from './Components/OrbitControlsComponent';\nimport NetworkGraph from './Components/NetworkGraph';\nimport DivGraph from './Components/DivGraph'\n\nvar nj = require('numjs');\nvar Quaternion = require('quaternion');\nvar ViewFrustum = require('./ViewFrustum_Ported/view_frustum.js');\nvar SE3 = require('./ViewFrustum_Ported/se3.js');\n\nextend({OrbitControls})\n\nconst App = (props) => {\n  const [rawFileString, setRawFileString] = useState(\"\");\n  const [rawIntrinsicString, setRawIntrinsicString] = useState(\"\");\n  const [rawExtrinsicString, setRawExtrinsicString] = useState(\"\");\n  const [pointCloud, setPointCloud] = useState([]);\n  const [frustums, setFrustums] = useState([]);\n  const [numCams, setNumCams] = useState(0);\n  const canvasRef = useRef();\n  const showGraph = \"divGraph\"; //temporary display value\n\n  //Function\n  // const swapYZ = (coords) => {\n  //   const tempY = coords[1]\n  //   coords[1] = coords[2]\n  //   coords[2] = tempY\n  //   return coords\n  // }\n\n  //Function\n  const readPointsFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0])\n    reader.onload = (e) => {\n      const fileString = e.target.result;\n      setRawFileString(fileString);\n    }\n  }\n\n  //Function\n  const readIntrinsicsFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0]);\n    reader.onload = (e) => {\n      const fileString = e.target.result;\n      setRawIntrinsicString(fileString);\n    }\n  }\n\n  //Function\n  const readExtrinsicsFile = (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.readAsText(e.target.files[0]);\n    reader.onload = (e) => {\n      const fileString = e.target.result;\n      setRawExtrinsicString(fileString);\n    }\n  }\n\n  //Function\n  const visualize_ASCII_PLY_File = () => {\n      const startPointsIndex = rawFileString.indexOf(\"end_header\")\n      const condensedString = rawFileString.substring(startPointsIndex)\n      var arrStringPoints = condensedString.split('\\n')\n      arrStringPoints.shift()\n      console.log(`Length: ${arrStringPoints.length}`);\n\n      var finalPointsJSX = [];  \n      const scale = 1;   \n      for (var i = 0; i < arrStringPoints.length; i += 500) {\n        var pointArr = arrStringPoints[i].split(\" \").map(Number);   \n        finalPointsJSX.push(<SpriteMesh  position={[scale*pointArr[0], scale*pointArr[1], scale*pointArr[2]]} \n          widthArgs={[0.05,0.05]} \n          color={`rgb(${pointArr[3]}, ${pointArr[4]}, ${pointArr[5]})`}/>);\n      }\n      setPointCloud(finalPointsJSX);\n  }\n\n  //Function\n  const visualize_3D_Points_File = () => {\n    var arrStringPoints = rawFileString.split('\\n');\n    \n    var finalPointsJSX = [];\n    const scale = 1;\n    for (var i = 0; i < arrStringPoints.length; i += 1) {\n      var pointArr = arrStringPoints[i].split(\" \").map(Number);\n\n      //swap Y and Z to convert file's Z coords into RTF's Y coords\n      finalPointsJSX.push(<SpriteMesh  position={[scale*pointArr[1], scale*pointArr[3], scale*pointArr[2]]}  \n        widthArgs={[0.1,0.1]} \n        color={`rgb(${pointArr[4]}, ${pointArr[5]}, ${pointArr[6]})`} />);\n    }\n    setPointCloud(finalPointsJSX);\n  }\n\n  //Function\n  const visualize_camera_frustums = () => {\n    //load intrinsics file\n    const startPointIndex = rawIntrinsicString.indexOf(\"# Number of cameras:\");\n    const condensedString = rawIntrinsicString.substring(startPointIndex);\n    var in_cameraList = condensedString.split('\\n');\n    in_cameraList.shift();\n\n    //load extriniscs file\n    var ex_cameraList = rawExtrinsicString.split('\\n');\n    ex_cameraList = ex_cameraList.slice(4);\n    ex_cameraList = ex_cameraList.filter((value, index) => (index % 2 == 0));\n\n    var finalFrustumsJSX = [];\n    // combine intrinsics + extrinsics to render frustums\n    for (var i = 0; i < numCams; i++) {\n      var inCamArray = in_cameraList[i].split(\" \");\n      var exCamArray = ex_cameraList[i].split(\" \");\n\n      //IMPORTANT VARIABLES\n      var fx, img_w, img_h, qw, qx, qy, qz, tx, ty, tz;\n\n      if (inCamArray[0] !== exCamArray[0]) {\n        alert(\"Error: Cam IDs in Intrinsic and Extrinsic Files Don't Match.\");\n        break;\n      }\n\n      inCamArray = inCamArray.slice(2);\n      inCamArray = inCamArray.map(Number);\n      exCamArray = exCamArray.map(Number);\n\n      img_w = inCamArray[0];\n      img_h = inCamArray[1];\n      fx = inCamArray[2];\n      qw = exCamArray[1];\n      qx = exCamArray[2];\n      qy = exCamArray[3];\n      qz = exCamArray[4];\n      tx = exCamArray[5];\n      ty = exCamArray[6];\n      tz = exCamArray[7];\n\n      //frustum + se3 creating and rendering\n      var frustumObj = new ViewFrustum(fx, img_w, img_h);\n      var q = new Quaternion(qw, qx, qy, qz) //w,x,y,z\n      var rotation_matrix = q.toMatrix(true);\n      var rotation = nj.array(rotation_matrix);\n      var translation = nj.array([tx, ty, tz]);\n      var wTc = new SE3(rotation, translation);\n      var verts_worldfr = frustumObj.get_mesh_vertices_worldframe(wTc);\n      \n      finalFrustumsJSX.push(<RenderFrustum v0={[verts_worldfr[0].get(0,0),verts_worldfr[0].get(0,1),verts_worldfr[0].get(0,2)]} \n          v1={[verts_worldfr[1].get(0,0),verts_worldfr[1].get(0,1),verts_worldfr[1].get(0,2)]} \n          v2={[verts_worldfr[2].get(0,0),verts_worldfr[2].get(0,1),verts_worldfr[2].get(0,2)]} \n          v3={[verts_worldfr[3].get(0,0),verts_worldfr[3].get(0,1),verts_worldfr[3].get(0,2)]} \n          v4={[verts_worldfr[4].get(0,0),verts_worldfr[4].get(0,1),verts_worldfr[4].get(0,2)]}\n          width={0.5}/>);\n    }\n    setFrustums(finalFrustumsJSX);\n  }\n\n  if (showGraph == \"divGraph\") {\n    return (\n      <DivGraph/>\n    )\n  } else if (showGraph == \"networkGraph\") {\n    return (\n      <div className=\"network_graph_container\">\n        <NetworkGraph/>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"app-container\">\n        <div className=\"upload-container\">\n  \n          <div className=\"pointcloud-upload-container\">\n            <p className=\"ply-instructions\">Point Cloud Upload</p>\n            <input type=\"file\" name=\"ply-file-reader\" onChange={(e) => readPointsFile(e)}/>\n            <button className=\"file-submit-btn\" onClick={visualize_3D_Points_File}>Visualize Point Cloud</button>\n          </div>\n  \n          <div className=\"frustum-upload-container\">\n            <p className=\"ply-instructions\">Frustum Upload</p>\n  \n            <div style={{display:'flex', flexDirection: 'row', alignItems: 'center'}}>\n              <p style={{marginRight: '5px', fontSize: '90%'}}>Intrinsics</p>\n              <input type=\"file\" onChange={(e) => readIntrinsicsFile(e)}/>\n            </div>\n            \n            <div style={{display:'flex', flexDirection: 'row', alignItems: 'center'}}>\n              <p style={{marginRight: '5px', fontSize: '90%'}}>Extrinsics</p>\n              <input type=\"file\" onChange={(e) => readExtrinsicsFile(e)}/>\n            </div>\n  \n            <div className=\"num-cams-container\">\n              <p style={{marginRight: '5px'}}>No. of Cameras:</p>\n              <input style={{height: '20px', width: '60px'}} type=\"number\" value={numCams} onChange={(e) => setNumCams(e.target.value)}/>\n            </div>\n  \n            <button className=\"frustums-submit-btn\" onClick={visualize_camera_frustums} >\n              Visualize Camera Frustums\n            </button>\n          </div>\n        </div>\n  \n        <Canvas colorManagement camera={{ fov: 30, position: [50, 50, 50]}} ref={canvasRef}>\n          <ambientLight intensity={0.5}/>\n          <pointLight position={[0, 0, 20]} intensity={0.5}/> \n          <directionalLight \n            position={[0,10,0]} \n            intensity={1.5} \n            shadow-mapSize-width={1024}\n            shadow-mapSize-height={1024}\n            shadow-camera-far={50}\n          />\n  \n          {pointCloud}\n          {frustums}\n          <CoordinateGrid />\n          <OrbitControlsComponent />\n        </Canvas>\n      </div>\n    )\n  }\n}\n\nexport default App;","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\PointMesh.js",[],["123","124"],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\SquareMesh.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\SpriteMesh.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\LineMesh.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\CoordinateGrid.js",["125"],"import React from \"react\";\r\nimport {Line, Html} from \"drei\";\r\n\r\n//Function\r\nconst getGridLines = () => {\r\n    var coordPairSet = []\r\n    //add x grid lines\r\n    for (var z = -10; z <= 10; z++) {\r\n      coordPairSet.push([[-10, 0, z], [10, 0, z]]);\r\n    }\r\n    //add z grid lines\r\n    for (var x = -10; x <= 10; x++) {\r\n      coordPairSet.push([[x, 0, -10], [x, 0, 10]]);\r\n    }\r\n\r\n    var finalLineGridSet = []\r\n    coordPairSet.map(coordPair => {\r\n      finalLineGridSet.push(<Line points={coordPair} color=\"black\" position={[0,0,0]} lineWidth={0.1}/>);\r\n    });\r\n    return finalLineGridSet;\r\n}\r\n\r\n//Component\r\nconst CoordinateGrid = () => { \r\n    return (\r\n      <mesh>\r\n          <Line \r\n            points={[[-10,0,0], [10,0,0]]} \r\n            color=\"red\" \r\n            position={[0,0,0]}\r\n            lineWidth={0.3}\r\n          />\r\n          <Html scaleFactor={50} position={[10,0,0]}>\r\n            <div class=\"content\">\r\n              x\r\n            </div>\r\n          </Html>\r\n\r\n          <Line \r\n            points={[[0,-10,0], [0,10,0]]} \r\n            color=\"blue\" \r\n            position={[0,0,0]}\r\n            lineWidth={0.3}\r\n          />\r\n          <Html scaleFactor={50} position={[0,10,0]}>\r\n            <div class=\"content\">\r\n              z\r\n            </div>\r\n          </Html>\r\n\r\n          <Line \r\n            points={[[0,0,-10], [0,0,10]]} \r\n            color=\"green\" \r\n            position={[0,0,0]}\r\n            lineWidth={0.3}\r\n          />\r\n          <Html scaleFactor={50} position={[0,0,10]}>\r\n            <div class=\"content\">\r\n              y\r\n            </div>\r\n          </Html>\r\n\r\n          {getGridLines()}\r\n      </mesh>\r\n    )\r\n}\r\n\r\nexport default CoordinateGrid;","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\RenderFrustum.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\OrbitControlsComponent.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\ViewFrustum_Ported\\view_frustum.js",["126"],"var nj = require('numjs');\r\nvar SE3 = require('./se3.js');\r\n\r\nconst DEFAULT_FRUSTUM_RAY_LENGTH = 0.5;  //meters, arbitrary\r\n\r\nmodule.exports = class ViewFrustum {\r\n    //Generates edges of a 5-face mesh for drawing pinhole camera in 3d\r\n\r\n    constructor(fx, img_w, img_h) {\r\n        /*\r\n            Args:\r\n                fx: focal length in x-direction, assuming square pixels (fx == fy)\r\n                img_w: image width (in pixels)\r\n                img_h: image height (in pixels)\r\n                frustum_ray_len: extent to which extend frustum rays away from optical center\r\n                    (increase length for large-scale scenes to make frustums visible)\r\n        */\r\n       this.fx_ = fx;\r\n       this.img_w_ = img_w;\r\n       this.img_h_ = img_h;\r\n       this.frustum_ray_len_ = DEFAULT_FRUSTUM_RAY_LENGTH;\r\n    }\r\n\r\n    normalize_ray_dirs(ray_dirs) {\r\n        var v0_mag = Math.sqrt(Math.pow(ray_dirs.get(0,0),2) + Math.pow(ray_dirs.get(0,1),2) + Math.pow(ray_dirs.get(0,2),2));\r\n        var v1_mag = Math.sqrt(Math.pow(ray_dirs.get(1,0),2) + Math.pow(ray_dirs.get(1,1),2) + Math.pow(ray_dirs.get(1,2),2));\r\n        var v2_mag = Math.sqrt(Math.pow(ray_dirs.get(2,0),2) + Math.pow(ray_dirs.get(2,1),2) + Math.pow(ray_dirs.get(2,2),2));\r\n        var v3_mag = Math.sqrt(Math.pow(ray_dirs.get(3,0),2) + Math.pow(ray_dirs.get(3,1),2) + Math.pow(ray_dirs.get(3,2),2));\r\n        var v4_mag = Math.sqrt(Math.pow(ray_dirs.get(4,0),2) + Math.pow(ray_dirs.get(4,1),2) + Math.pow(ray_dirs.get(4,2),2));\r\n\r\n        ray_dirs.set(0, 0, (ray_dirs.get(0,0) / v0_mag));\r\n        ray_dirs.set(0, 1, (ray_dirs.get(0,1) / v0_mag));\r\n        ray_dirs.set(0, 2, (ray_dirs.get(0,2) / v0_mag));\r\n        ray_dirs.set(1, 0, (ray_dirs.get(1,0) / v1_mag));\r\n        ray_dirs.set(1, 1, (ray_dirs.get(1,1) / v1_mag));\r\n        ray_dirs.set(1, 2, (ray_dirs.get(1,2) / v1_mag));\r\n        ray_dirs.set(2, 0, (ray_dirs.get(2,0) / v2_mag));\r\n        ray_dirs.set(2, 1, (ray_dirs.get(2,1) / v2_mag));\r\n        ray_dirs.set(2, 2, (ray_dirs.get(2,2) / v2_mag));\r\n        ray_dirs.set(3, 0, (ray_dirs.get(3,0) / v3_mag));\r\n        ray_dirs.set(3, 1, (ray_dirs.get(3,1) / v3_mag));\r\n        ray_dirs.set(3, 2, (ray_dirs.get(3,2) / v3_mag));\r\n        ray_dirs.set(4, 0, (ray_dirs.get(4,0) / v4_mag));\r\n        ray_dirs.set(4, 1, (ray_dirs.get(4,1) / v4_mag));\r\n        ray_dirs.set(4, 2, (ray_dirs.get(4,2) / v4_mag));\r\n\r\n        return ray_dirs;\r\n    }\r\n\r\n    compute_pixel_ray_directions_vectorized(uv, fx, img_w, img_h) {\r\n        /*\r\n            Given (u,v) coordinates and intrinsics, generate pixels rays in cam. coord frame\r\n            Assume +z points out of the camera, +y is downwards, and +x is across the imager.\r\n            Args:\r\n                uv: array of shape (N,2) with (u,v) coordinates\r\n                fx: focal length in x-direction, assuming square pixels (fx == fy)\r\n                img_w: image width (in pixels)\r\n                img_h: image height (in pixels)\r\n            Returns:\r\n                ray_dirs: Array of shape (N,3) with ray directions in camera frame\r\n        */\r\n\r\n        //assuming principal point at center of images now\r\n        var px = img_w / 2;\r\n        var py = img_h / 2;\r\n\r\n        var num_rays = uv.shape[0];\r\n\r\n        //broadcase (1,2) across (N,2) uv array\r\n        var centers_broadcasted = nj.array([\r\n            [px,py],\r\n            [px,py],\r\n            [px,py],\r\n            [px,py],\r\n            [px,py]\r\n        ]);\r\n        var center_offsets = uv.subtract(centers_broadcasted);\r\n        var ray_dirs = nj.zeros([num_rays, 3]);\r\n\r\n        ray_dirs.set(0,0, center_offsets.get(0,0));\r\n        ray_dirs.set(0,1, center_offsets.get(0,1));\r\n        ray_dirs.set(1,0, center_offsets.get(1,0));\r\n        ray_dirs.set(1,1, center_offsets.get(1,1));\r\n        ray_dirs.set(2,0, center_offsets.get(2,0));\r\n        ray_dirs.set(2,1, center_offsets.get(2,1));\r\n        ray_dirs.set(3,0, center_offsets.get(3,0));\r\n        ray_dirs.set(3,1, center_offsets.get(3,1));\r\n        ray_dirs.set(4,0, center_offsets.get(4,0));\r\n        ray_dirs.set(4,1, center_offsets.get(4,1));\r\n        ray_dirs.set(0,2, this.fx_);\r\n        ray_dirs.set(1,2, this.fx_);\r\n        ray_dirs.set(2,2, this.fx_);\r\n        ray_dirs.set(3,2, this.fx_);\r\n        ray_dirs.set(4,2, this.fx_);\r\n\r\n        ray_dirs = this.normalize_ray_dirs(ray_dirs); //TODO\r\n        return ray_dirs\r\n    }\r\n\r\n    get_frustum_vertices_camfr() {\r\n        /*\r\n            Obtain 3d positions of all 5 frustum vertices in the camera frame\r\n          (x,y,z)               (x,y,z)                (x,y,z)              (x,y,z)\r\n              \\\\=================//                      \\\\                   //\r\n               \\\\               //                        \\\\ 1-------------2 //\r\n        (-w/2,-h/2,fx)       (w/2,-h/2,fx)                 \\\\| IMAGE PLANE |//\r\n                 1-------------2                             |             |/\r\n                 |\\\\         //| IMAGE PLANE  (-w/2, h/2,fx) 4-------------3 (w/2, h/2,fx)\r\n                 | \\\\       // | IMAGE PLANE                  \\\\         //\r\n                 4--\\\\-----//--3                               \\\\       //\r\n                     \\\\   //                                    \\\\     //\r\n                      \\\\ //                                      \\\\   //\r\n                        O PINHOLE                                 \\\\ //\r\n                                                                    O PINHOLE\r\n        */\r\n\r\n        var uv = nj.array([\r\n            [Math.floor(this.img_w_ / 2), Math.floor(this.img_h_ / 2)],  //v0 = optical center\r\n            [0, 0],                              //v1 = top-left\r\n            [this.img_w_ - 1, 0],                //v2 = top-right\r\n            [this.img_w_ - 1, this.img_h_ - 1],  //v3 = bottom-right\r\n            [0, this.img_h_ - 1],                //v4 = bottom-left\r\n        ]);\r\n        var ray_dirs = this.compute_pixel_ray_directions_vectorized(uv, this.fx, this.img_w_, this.img_h_);\r\n        // var v0 = ray_dirs[0] * 0;\r\n        // var v1 = ray_dirs[1] * this.frustum_ray_len_;\r\n        // var v2 = ray_dirs[2] * this.frustum_ray_len_;\r\n        // var v3 = ray_dirs[3] * this.frustum_ray_len_;\r\n        // var v4 = ray_dirs[4] * this.frustum_ray_len_;\r\n        // return [v0, v1, v2, v3, v4];\r\n        var scaled_ray_dirs = this.calculate_scaled_ray_dirs(ray_dirs, this.frustum_ray_len_);\r\n        return scaled_ray_dirs\r\n    }\r\n\r\n    get_mesh_vertices_worldframe(wTc) {\r\n        /*Return 8 edges defining the frustum mesh, in the world/global frame.\r\n            Args:\r\n                wTc: camera pose in world frame\r\n            Returns:\r\n                edges_worldfr: array of shape (8,3,2) representing 8 polylines in world frame\r\n        */\r\n       var vList = this.get_frustum_vertices_camfr();\r\n       var v0 = vList[0].reshape(1,3);\r\n       var v1 = vList[1].reshape(1,3);\r\n       var v2 = vList[2].reshape(1,3);\r\n       var v3 = vList[3].reshape(1,3);\r\n       var v4 = vList[4].reshape(1,3);\r\n\r\n       var v0_worldfr = wTc.transform_point_cloud(v0);\r\n       var v1_worldfr = wTc.transform_point_cloud(v1);\r\n       var v2_worldfr = wTc.transform_point_cloud(v2);\r\n       var v3_worldfr = wTc.transform_point_cloud(v3);\r\n       var v4_worldfr = wTc.transform_point_cloud(v4);\r\n\r\n       return [v0_worldfr, v1_worldfr, v2_worldfr, v3_worldfr, v4_worldfr];\r\n    }\r\n\r\n    calculate_scaled_ray_dirs(ray_dirs, frustum_ray_len) {\r\n        var v0_scaled = nj.array([ray_dirs.get(0,0) * 0, \r\n                                ray_dirs.get(0,1) * 0, \r\n                                ray_dirs.get(0,2) * 0]);\r\n        var v1_scaled = nj.array([ray_dirs.get(1,0) * frustum_ray_len,\r\n                                ray_dirs.get(1,1) * frustum_ray_len,\r\n                                ray_dirs.get(1,2) * frustum_ray_len]);\r\n        var v2_scaled = nj.array([ray_dirs.get(2,0) * frustum_ray_len,\r\n                                ray_dirs.get(2,1) * frustum_ray_len,\r\n                                ray_dirs.get(2,2) * frustum_ray_len]);\r\n        var v3_scaled = nj.array([ray_dirs.get(3,0) * frustum_ray_len,\r\n                                ray_dirs.get(3,1) * frustum_ray_len,\r\n                                ray_dirs.get(3,2) * frustum_ray_len]);\r\n        var v4_scaled = nj.array([ray_dirs.get(4,0) * frustum_ray_len,\r\n                                ray_dirs.get(4,1) * frustum_ray_len,\r\n                                ray_dirs.get(4,2) * frustum_ray_len]);\r\n        return [v0_scaled, v1_scaled, v2_scaled, v3_scaled, v4_scaled];\r\n    }\r\n}\r\n\r\n\r\n\r\n// var rotation = nj.array([\r\n//     [4,3,2],\r\n//     [10,9,8],\r\n//     [6,5,4]\r\n// ]);\r\n// var translation = nj.array([99,98,97]);\r\n// sampleVF = new ViewFrustum(10, 200, 100);\r\n// wTc = new SE3(rotation, translation);\r\n// output = sampleVF.get_mesh_vertices_worldframe(wTc);\r\n// console.log(output[4]);","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\ViewFrustum_Ported\\se3.js",["127","128"],"var nj = require('numjs');\r\n\r\nmodule.exports = class SE3 {\r\n    //An SE3 class allows point cloud rotation and translation operations.\r\n\r\n    constructor(rotation, translation) {\r\n        /*\r\n            Initialize an SE3 instance with its rotation and translation matrices\r\n\r\n            Args:\r\n                rotation: Array of shape (3,3)\r\n                translation: Array of shape (3,)\r\n        */\r\n        if (rotation.shape[0] !== 3 || rotation.shape[1] !== 3) throw 'Invalid Rotation Matrix';\r\n        if (translation.shape[0] !== [3]) throw 'Invalid Translation Matrix';\r\n        this.rotation = rotation;\r\n        this.translation = translation;\r\n\r\n        this.transform_matrix = nj.identity(4);\r\n        this.transform_matrix.set(0,0,this.rotation.get(0,0));\r\n        this.transform_matrix.set(0,1,this.rotation.get(0,1));\r\n        this.transform_matrix.set(0,2,this.rotation.get(0,2));\r\n        this.transform_matrix.set(1,0,this.rotation.get(1,0));\r\n        this.transform_matrix.set(1,1,this.rotation.get(1,1));\r\n        this.transform_matrix.set(1,2,this.rotation.get(1,2));\r\n        this.transform_matrix.set(2,0,this.rotation.get(2,0));\r\n        this.transform_matrix.set(2,1,this.rotation.get(2,1));\r\n        this.transform_matrix.set(2,2,this.rotation.get(2,2));\r\n        this.transform_matrix.set(0,3,this.translation.get(0));\r\n        this.transform_matrix.set(1,3,this.translation.get(1));\r\n        this.transform_matrix.set(2,3,this.translation.get(2));\r\n    }\r\n\r\n    transform_point_cloud(point_cloud) {\r\n        /*\r\n            Apply the SE3 transformation to the point cloud.\r\n\r\n            Args:\r\n                point_cloud: Array of shape (N,3)\r\n            Returns:\r\n                trasnformed_point_cloud: Array of shape (N,3)\r\n        */\r\n        var num_pts = point_cloud.shape[0];\r\n        var ones = nj.ones([num_pts, 1]);\r\n        var homogeneous_pts = nj.concatenate(point_cloud, ones);\r\n\r\n        var transformed_point_cloud = homogeneous_pts.dot(this.transform_matrix.T);\r\n\r\n        var sliced = nj.array([[transformed_point_cloud.get(0,0),\r\n                            transformed_point_cloud.get(0,1),\r\n                            transformed_point_cloud.get(0,2)]])\r\n        return sliced;\r\n    }\r\n}","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\NetworkGraph.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\gtsfm_node_list.js",["129"],"const gtsfm_node_set = ['absolute Rs', \r\n                        'Descriptors', \r\n                        'DigiCamDB', \r\n                        'E matrix', \r\n                        'relative Rs (2): i2_R_i1', \r\n                        'Images', \r\n                        'Post-Processor', \r\n                        'relative Rs: i2_r_i1', \r\n                        'LargestConnected Component Extractor', \r\n                        'Image Pair Indices (i1,i2)', \r\n                        'relative Ts: i2_t_i1', \r\n                        'Scene Directory', \r\n                        'absolute ts(2)', \r\n                        'Dense Point Cloud', \r\n                        'Verified Correspondence Indices', \r\n                        'Intrinsics', \r\n                        'File Writer', \r\n                        'MVSNet', \r\n                        'Triangulation', \r\n                        'Optimizer', \r\n                        'Keypoint Describer', \r\n                        'SfMData', \r\n                        'absolute Ts', \r\n                        'Output Directory', \r\n                        'Scene Image Directories', \r\n                        'Detector', \r\n                        'Aggregate', \r\n                        'Bundler Calibrator', \r\n                        'Optimized Intrinsics', \r\n                        'Keypoints', \r\n                        'absolute Rs(2)', \r\n                        'Sparse Point Cloud', \r\n                        'Shonan', \r\n                        'Zipped Results for All Scenes', \r\n                        'Verifier', \r\n                        '1d-SfM', \r\n                        'Bundler Pinhole Cameras', \r\n                        'Data Loader + Filter Invalid Edges', \r\n                        'Scene Looper', \r\n                        'Putative Matcher', \r\n                        'Data Association w/ Track Filtering', \r\n                        'SFMResult as files', \r\n                        'Dense Mesh Reconstruction', \r\n                        'Putative Correspondence Indices', \r\n                        'relative Ts (2): i2_t_i1', \r\n                        'SFMResult', \r\n                        'Image i'];\r\n\r\nvar node_set_formatted = [];\r\nfor (var i = 0; i < gtsfm_node_set.length; i++) {\r\n    node_set_formatted.push({id: gtsfm_node_set[i]});\r\n}\r\n\r\n//temporary\r\nvar node_sample = [{\r\n    id: 'Scene Image Directories',\r\n    x: 100,\r\n    y: 100\r\n}, {\r\n    id: 'Scene Looper',\r\n    x: 500,\r\n    y: 200\r\n}, {\r\n    id: 'Scene Directory',\r\n    x: 900,\r\n    y:300\r\n}]\r\n//DELETE later\r\n\r\nmodule.exports = node_set_formatted;","C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\gtsfm_edge_list.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\DivGraph.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\DivNode.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\FrontendSummary.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\PPDivNode.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\OptDivNode.js",[],"C:\\Users\\adisi\\Desktop\\Georgia Tech\\Spring 2021\\SfM Research\\gtsfm\\rtf_vis_tool\\src\\Components\\MVOSummary.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":2,"column":16,"nodeType":"136","messageId":"137","endLine":2,"endColumn":25},{"ruleId":"138","severity":1,"message":"139","line":22,"column":32,"nodeType":"140","messageId":"141","endLine":22,"endColumn":34},{"ruleId":"138","severity":1,"message":"139","line":87,"column":26,"nodeType":"140","messageId":"141","endLine":87,"endColumn":28},{"ruleId":"130","replacedBy":"142"},{"ruleId":"132","replacedBy":"143"},{"ruleId":"130","replacedBy":"144"},{"ruleId":"132","replacedBy":"145"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":16,"nodeType":"136","messageId":"137","endLine":1,"endColumn":25},{"ruleId":"134","severity":1,"message":"146","line":72,"column":9,"nodeType":"136","messageId":"137","endLine":72,"endColumn":33},{"ruleId":"147","severity":1,"message":"148","line":118,"column":71,"nodeType":"149","messageId":"150","endLine":118,"endColumn":73},{"ruleId":"147","severity":1,"message":"148","line":168,"column":17,"nodeType":"149","messageId":"150","endLine":168,"endColumn":19},{"ruleId":"147","severity":1,"message":"148","line":172,"column":24,"nodeType":"149","messageId":"150","endLine":172,"endColumn":26},{"ruleId":"130","replacedBy":"151"},{"ruleId":"132","replacedBy":"152"},{"ruleId":"138","severity":1,"message":"139","line":17,"column":32,"nodeType":"140","messageId":"141","endLine":17,"endColumn":34},{"ruleId":"134","severity":1,"message":"153","line":2,"column":5,"nodeType":"136","messageId":"137","endLine":2,"endColumn":8},{"ruleId":"154","severity":1,"message":"155","line":14,"column":65,"nodeType":"156","messageId":"157","endLine":14,"endColumn":97},{"ruleId":"154","severity":1,"message":"155","line":15,"column":43,"nodeType":"156","messageId":"157","endLine":15,"endColumn":78},{"ruleId":"134","severity":1,"message":"158","line":55,"column":5,"nodeType":"136","messageId":"137","endLine":55,"endColumn":16},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["159"],["160"],["159"],["160"],"'visualize_ASCII_PLY_File' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["159"],["160"],"'SE3' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'node_sample' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]