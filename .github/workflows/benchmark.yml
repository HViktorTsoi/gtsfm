name: Benchmark GTSFM on select datasets using SIFT and Deep front-ends

on: [pull_request, workflow_dispatch]

jobs:
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config_dataset_info: [
            "sift_front_end,  door-12,               12,  JPG,  test_data,  olsson-loader",
            "deep_front_end,  door-12,               12,  JPG,  test_data,  olsson-loader",
            "sift_front_end,  skydio-8,              8,   jpg,  gdrive ,    colmap-loader",
            "deep_front_end,  skydio-8,              8,   jpg,  gdrive,     colmap-loader",
            "sift_front_end,  skydio-32,             32,  jpg,  gdrive,     colmap-loader",
            "deep_front_end,  skydio-32,             32,  jpg,  gdrive,     colmap-loader",
            "sift_front_end,  palace-fine-arts-281,  20,  jpg,  wget,       olsson-loader"
        ]
    defaults:
      run:
        shell: bash -l {0}

    env:
      PYTHON_VERSION: 3.8

    steps:
      - uses: actions/checkout@v2
      - name: Cache conda env
        uses: actions/cache@v2
        env:
          # Increase this value to reset cache if environment_linux.yml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{hashFiles('environment_linux.yml') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          activate-environment: gtsfm-v1
          environment-file: environment_linux.yml
          python-version: 3.8
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
      - name: Environment setup
        run: |
          bash .github/scripts/setup.sh
          conda info
      - name: Parse args
        # large files from google drive first have a prompt about virus scan being inactive. Need 2 WGET commands.
        run: |
          IFS=',  ' read -r -a array <<< "${{ matrix.config_dataset_info }}"
          config_name=$(echo ${array[0]} | sed 's/ //g')
          dataset_name=$(echo ${array[1]} | sed 's/ //g')
          max_frame_lookahead=$(echo ${array[2]} | sed 's/ //g')
          image_extension=$(echo ${array[3]} | sed 's/ //g')
          dataset_src=$(echo ${array[4]} | sed 's/ //g')
          loader_name=$(echo ${array[5]} | sed 's/ //g')

          echo "Config: ${config_name} Dataset: ${dataset_name} Download Source: ${dataset_src}"

          # PREPARE THE DOWNLOAD URLs
          if [ "$dataset_name" == "skydio-8" ]; then
              export GDRIVE_FILEID='1mmM1p_NpL7-pnf3iHWeWVKpsm1pcBoD5'
          elif [ "$dataset_name" == "skydio-32" ]; then
              export GDRIVE_FILEID='1BQ6jp0DD3D9yhTnrDoEddzlMYT0RRH68'
          elif [ "$dataset_name" == "palace-fine-arts-281" ]; then
              WGET_URL1=http://vision.maths.lth.se/calledataset/fine_arts_palace/fine_arts_palace.zip
              WGET_URL2=http://vision.maths.lth.se/calledataset/fine_arts_palace/data.mat
          fi

          # DOWNLOAD THE DATA
          if [ "$dataset_src" == "gdrive" ]; then
              echo "Downloading ${dataset_name} from GDRIVE"
              export GDRIVE_URL='https://docs.google.com/uc?export=download&id='$GDRIVE_FILEID
              wget --save-cookies cookies.txt $GDRIVE_URL -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1/p' > confirm.txt
              wget --load-cookies cookies.txt -O .zip $GDRIVE_URL'&confirm='$(<confirm.txt)

          elif [ "$dataset_src" == "wget" ]; then
              echo "Downloading ${dataset_name} with WGET"
              wget $WGET_URL1
              wget $WGET_URL2
          fi
